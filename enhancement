#How Hand Movement Controls the System
Hand Detection: The system uses MediaPipe to detect and track the hand landmarks in real-time through your webcam.
It processes each frame and identifies key points on the hand (such as fingertips, wrist, and palm).

Cursor Movement:

The position of the index finger (landmark 8) is tracked to move the cursor.
The get_position() function translates the position of the index finger (relative to the camera) to screen coordinates (mouse position).
The movement is stabilized by dampening, so small hand movements wonâ€™t cause jerky cursor behavior.
Gestures for Actions:

Fist Gesture: Closing the hand into a fist will "grab" the mouse, allowing the user to drag the cursor. The system detects this gesture and simulates a mouse down action (holding the left button).
Pinch Gesture: When the thumb and index fingers come closer, a scrolling action is triggered:
If the pinch movement is vertical, the system scrolls up or down.
If the pinch is horizontal, the system scrolls horizontally.
V Gesture: Holding up the index and middle fingers in a "V" shape triggers the mouse click.
Two Finger Closed Gesture: Bringing the thumb and index fingers together and closing them triggers a double-click.
Multi-Hand Support:

The system can track both left and right hands. Depending on your dominant hand (which can be set in the code), the right or left hand will control the mouse.
Each hand can be used for different controls (e.g., left hand for movement, right hand for clicking).
Stabilization: To ensure smooth control, the system uses a dampening technique: it reduces the sensitivity of the mouse movement when the hand is not moving significantly, 
                   avoiding erratic cursor jumps.

1. Adding New Features:
Example:

Feature: Implemented a "Pinch-to-Zoom" gesture.
Enhancement Description:
"Added pinch-to-zoom functionality for smoother control of the cursor and zooming in/out of images or web pages."
2. Improving Existing Features:
Example:

Feature: Improved gesture recognition for hand gestures.
Enhancement Description:
"Enhanced gesture recognition accuracy by optimizing the finger tracking algorithm, reducing false positives and ensuring precise gesture detection."
3. Optimizing Performance:
Example:

Feature: Optimized the hand tracking algorithm.
Enhancement Description:
"Optimized the hand tracking system to reduce CPU usage and improve real-time processing speed, providing a smoother user experience even on lower-spec devices."
4. Adding Multi-Device Support:
Example:

Feature: Support for multiple devices (e.g., tablet, phone).
Enhancement Description:
"Introduced cross-platform support, enabling the gesture control system to work on both desktop and mobile devices seamlessly."
5. Fixing Bugs and Enhancing Stability:
Example:

Bug Fix: Fixed bug where hand gestures were not recognized consistently.
Enhancement Description:
"Fixed a bug that caused inconsistent gesture detection on certain hand positions, ensuring stable and reliable gesture control across all hand movements."
6. Adding Gesture Controls for Specific Actions:
Example:

Feature: Added gesture for screenshot capture.
Enhancement Description:
"Introduced a new hand gesture to capture screenshots, allowing users to take a screenshot with a simple hand motion."
7. Improving UI/UX:
Example:

Feature: Updated the user interface.
Enhancement Description:
"Revamped the UI for easier navigation, added on-screen instructions for new users, and included visual feedback for recognized gestures."
